<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
                        
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.recruit.control">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />    
  </context:component-scan>
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--默认编码  -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
	
	
	<!-- 111111111111111111111111111111111111111111111111111 -->
	
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/errors/showError</value>
		</property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.SQLException">/errors/showDBError</prop>
				<prop key="java.lang.RuntimeException">/errors/showError</prop>
			</props>
		</property>
	</bean>
	
	<context:annotation-config />
	<!-- Scans within the base package of the application for @Components to configure as beans -->
	<!-- @Controller, @Service, @Configuration, etc. -->
	<!-- <context:component-scan base-package="com.lnzyjt.lnzy" >
		<context:exclude-filter type="annotation" expression="com.lnzyjt.lnzy.service"/>
		<context:exclude-filter type="annotation" expression="com.lnzyjt.lnzy.control"/>
	</context:component-scan> -->

	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，添加拦截器，类级别的处理器映射 -->
	<!-- This will override the default DefaultAnnotationHandlerMapping that is created, - and not map file extensions automagically -->
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="useDefaultSuffixPattern" value="false" />
	</bean>

	<!-- 利用MyBatis-Spring的自动装配机制： 自动从com.ootoweb.gen.dao包中寻找接口装配成MapperFactoryBean 有了下面这个配置，那么就不需要像上面那样一个一个的去注册映射器Bean了，大大的减少了工作量 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.recruit.dao" />
	</bean>
	
	<!-- 对静态资源文件的访问 方案一 （二选一） -->
	<mvc:default-servlet-handler />
	<!-- 对静态资源文件的访问 方案二 （二选一） -->
	<!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/> <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/> <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> -->
	
	<mvc:view-controller path="/" view-name="login"/>
	<mvc:view-controller path="/login" view-name="login"/>
	<mvc:view-controller path="/error/showError" view-name="404"/>
	<mvc:view-controller path="/error/showError" view-name="503"/>
	
	

</beans> 